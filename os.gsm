GNL_os_handle    is ushort = GNL_LOAD("/Applications/Gismolang/gismo_os.dll")

GNL_os_openFile  is ushort = GNL_SYMBOL (GNL_os_handle, "openFile")
GNL_os_closeFile is ushort = GNL_SYMBOL (GNL_os_handle, "closeFile")
GNL_os_readFile  is ushort = GNL_SYMBOL (GNL_os_handle, "readFile")
GNL_os_writeFile is ushort = GNL_SYMBOL (GNL_os_handle, "writeFile")
GNL_os_alert     is ushort = GNL_SYMBOL (GNL_os_handle, "alert")
GNL_os_inform    is ushort = GNL_SYMBOL (GNL_os_handle, "inform")
GNL_os_warn      is ushort = GNL_SYMBOL (GNL_os_handle, "warn")
GNL_os_tell      is ushort = GNL_SYMBOL (GNL_os_handle, "tell")
GNL_os_gsystem   is ushort = GNL_SYMBOL (GNL_os_handle, "gsystem")
GNL_os_fontColor is ushort = GNL_SYMBOL (GNL_os_handle, "fontColor")
GNL_os_cursorPos is ushort = GNL_SYMBOL (GNL_os_handle, "cursorPos")
GNL_os_beep      is ushort = GNL_SYMBOL (GNL_os_handle, "beep")
GNL_os_wait      is ushort = GNL_SYMBOL (GNL_os_handle, "wait")
GNL_os_formUSh   is ushort = GNL_SYMBOL (GNL_os_handle, "formUShort")
GNL_os_formUInt  is ushort = GNL_SYMBOL (GNL_os_handle, "formUInt")
GNL_os_formULong is ushort = GNL_SYMBOL (GNL_os_handle, "formULong")
GNL_os_shR       is ushort = GNL_SYMBOL (GNL_os_handle, "shR")
GNL_os_shL	      is ushort = GNL_SYMBOL (GNL_os_handle, "shL")
GNL_os_bitAt		 is ushort = GNL_SYMBOL (GNL_os_handle, "bitAt")
GNL_os_bitSet    is ushort = GNL_SYMBOL (GNL_os_handle, "bitSet")
GNL_os_unsigned  is ushort = GNL_SYMBOL (GNL_os_handle, "_unsigned")
GNL_os_signed    is ushort = GNL_SYMBOL (GNL_os_handle, "_signed")

GNL_os_createChannel is ushort = GNL_SYMBOL(GNL_os_handle, "createChannel")
GNL_os_closeChannel is ushort = GNL_SYMBOL(GNL_os_handle, "closeChannel")
GNL_os_send is ushort = GNL_SYMBOL(GNL_os_handle, "gismo_send")
GNL_os_receive is ushort = GNL_SYMBOL(GNL_os_handle, "receive")
GNL_os_listen is ushort = GNL_SYMBOL(GNL_os_handle, "gismo_listen")

// Color Codes

brightBlack             := "\x[0;30m"
brightRed               := "\x[0;31m"
brightGreen             := "\x[0;32m"
brightYellow            := "\x[0;33m"
brightBlue              := "\x[0;34m"
brightMagenta           := "\x[0;35m"
brightCyan              := "\x[0;36m"
brightWhite             := "\x[0;37m"

backgroundBrightBlack   := "\x[40;1m"
backgroundBrightRed     := "\x[41;1m"
backgroundBrightGreen   := "\x[42;1m"
backgroundBrightYellow  := "\x[43;1m"
backgroundBrightBlue    := "\x[44;1m"
backgroundBrightMagenta := "\x[45;1m"
backgroundBrightCyan    := "\x[46;1m"
backgroundBrightWhite   := "\x[47;1m"

bold                    := "\x[1m"
underline               := "\x[4m"
reversed                := "\x[7m"

reset                   := "\x[0m"

commonColors is txt[
	brightBlack,
	brightRed,
	brightGreen,
	brightYellow,
	brightBlue,
	brightMagenta,
	brightCyan,
	brightWhite,

	backgroundBrightBlack,
	backgroundBrightRed,
	backgroundBrightGreen,
	backgroundBrightYellow,
	backgroundBrightBlue,
	backgroundBrightMagenta,
	backgroundBrightCyan,
	backgroundBrightWhite,

	reset
]

open (txt path, txt flags) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_openFile, ulong, path, flags)
}

close (ulong fileptr) {
	GNL_EXEC (GNL_os_handle, GNL_os_closeFile, 0, fileptr)
}

read (ulong fileptr) txt {
	return GNL_EXEC (GNL_os_handle, GNL_os_readFile, txt, fileptr)
}

write (ulong fileptr, txt content) {
	GNL_EXEC (GNL_os_handle, GNL_os_writeFile, 0, fileptr, content)
}

alert (txt message, txt title) {
	GNL_EXEC (GNL_os_handle, GNL_os_alert, 0, message, title)
}

inform (txt message, txt title) {
	GNL_EXEC (GNL_os_handle, GNL_os_inform, 0, message, title)
}

warn (txt message, txt title) {
	GNL_EXEC (GNL_os_handle, GNL_os_warn, 0, message, title)
}

tell (txt message, txt title) {
	GNL_EXEC (GNL_os_handle, GNL_os_tell, 0, message, title)
}

system (txt command) int {
	return GNL_EXEC (GNL_os_handle, GNL_os_gsystem, int, command)
}

fontColor (short color) {
	if color < commonColors.Size()
		commonColors[color].Print()
}

cursorPos (int x, int y) {
	GNL_EXEC (GNL_os_handle, GNL_os_cursorPos, 0, x, y)
}

beep (ulong freq, ulong durr) {
	GNL_EXEC (GNL_os_handle, GNL_os_beep, 0, freq, durr)
}

wait (int millisec) {
	GNL_EXEC (GNL_os_handle, GNL_os_wait, 0, millisec)
}

formUShort (ubyte a, ubyte b) ushort {
	return GNL_EXEC (GNL_os_handle, GNL_os_formUSh, ushort, a, b)
}

formUInt (ubyte a, ubyte b, ubyte c, ubyte d) uint {
	return GNL_EXEC (GNL_os_handle, GNL_os_formUInt, uint, a, b, c, d)
}

formULong (ubyte a, ubyte b, ubyte c, ubyte d, ubyte e, ubyte f, ubyte g, ubyte h) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_formULong, ulong, a, b, c, d, e, f, g, h)
}

shR (ulong bitfield, ulong pos) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_shR, ulong, bitfield, pos)
}

shL (ulong bitfield, ulong pos) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_shL, ulong, bitfield, pos)
}

bitAt (ulong bitfield, ulong pos) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_bitAt, ulong, bitfield, pos)
}

bitSet (ulong bitfield, ulong pos, ubyte bit) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_bitSet, ulong, bitfield, pos, bit)
}

unsigned (long bitfield) ulong {
	return GNL_EXEC (GNL_os_handle, GNL_os_unsigned, ulong, bitfield)
}

signed (ulong bitfield) long {
	return GNL_EXEC (GNL_os_handle, GNL_os_signed, long, bitfield)
}

createChannel() Ref {
	return GNL_EXEC (GNL_os_handle, GNL_os_createChannel, Ref)
}

closeChannel(Ref channel) Ref {
	return GNL_EXEC(GNL_os_handle, GNL_os_closeChannel, Ref, channel)
}

sendInt(Ref channel, long i) {
	GNL_EXEC(GNL_os_handle, GNL_os_send, 0, channel, i)
}

sendUInt(Ref channel, ulong u) {
	GNL_EXEC(GNL_os_handle, GNL_os_send, 0, channel, u)
}

sendFloat(Ref channel, double f) {
	GNL_EXEC(GNL_os_handle, GNL_os_send, 0, channel, f)
}

sendText(Ref channel, txt a) {
	channel.sendUInt(a.Length())
	i = 0u
	for i < a.Length() {
		channel.sendUInt(a.CharAt(i))
		// wait(1)
		i = i + 1u
	}
}

receiveInt(Ref channel) long {
	return GNL_EXEC(GNL_os_handle, GNL_os_receive, long, channel)
}

receiveUInt(Ref channel) ulong {
	return GNL_EXEC(GNL_os_handle, GNL_os_receive, ulong, channel)
}

receiveFloat(Ref channel) double {
	return GNL_EXEC(GNL_os_handle, GNL_os_receive, double, channel)
}

numberOfTransmissions = 0

receiveText(Ref channel) txt {
	numberOfTransmissions += 1u
	text := ""
	length := channel.receiveUInt()
	// fmt(numberOfTransmissions, ": ", length, " ").Print()
	i = 0u
	for i < length {
		c is ubyte = channel.receiveUInt()
		// "".InsertChar(c).Print()
		text = text.InsertChar(c)
		i = i + 1u
	}
	// output()
	return text
}

listen(Ref channel) ubyte {
	return GNL_EXEC(GNL_os_handle, GNL_os_listen, ubyte, channel)
}


currentFont = false
currentSize = 3.0

characterWidth = 7
characterHeight = 9
fontWidth = 128
fontHeight = 64
tabLength = 4

fontSettings(long width, long height, long gridWidth, long gridHeight) {
	characterWidth = gridWidth
	characterHeight = gridHeight
	fontWidth = width
	fontHeight = height
}

font_forecolor_r is ubyte = 0
font_forecolor_g is ubyte = 0
font_forecolor_b is ubyte = 0

fontFgColor(ubyte r, ubyte g, ubyte b) {
	font_forecolor_r = r
	font_forecolor_g = g
	font_forecolor_b = b
}

font_backcolor_r is ubyte = 0
font_backcolor_g is ubyte = 0
font_backcolor_b is ubyte = 0

fontBgColor(ubyte r, ubyte g, ubyte b) {
	font_backcolor_r = r
	font_backcolor_g = g
	font_backcolor_b = b
}

drawCharacterAtXY(Ref renderer, double px, double py, ulong character) ubyte {
	index  = character // - 32
	if index < 0 {
		return false
	}
	width  is long = fontWidth  / characterWidth
	height is long = fontHeight / characterHeight
	x is long = index % width
	y is long = index / width
	renderer.drawSprite@sdl (
		currentFont,
		px, py,
		currentSize * characterWidth,
		currentSize * characterHeight,
		
		x * characterWidth, 
		y * characterHeight, 
		characterWidth,
		characterHeight
	)
	return true
}

drawCharacterColoredMatrix(Ref renderer, ulong index, ulong matrix_width, ulong character) {
	
	px is long = (index % matrix_width) * characterWidth * currentSize
	py is long = (index / matrix_width) * characterHeight * currentSize

	renderer.drawColor@sdl (font_backcolor_r, font_backcolor_g, font_backcolor_b, 255)
	renderer.fillRect@sdl (px, py, currentSize * characterWidth, currentSize * characterHeight)
	renderer.drawColor@sdl (font_forecolor_r, font_forecolor_g, font_forecolor_b, 255)
	renderer.drawCharacterAtXY(px, py, character)
}

setFontSize(double fontSize) {
	currentSize = fontSize
}

setFont(Ref font) {
	currentFont = font
}

setForegroundColor(ubyte r, ubyte g, ubyte b) {
	font_forecolor_r = r
	font_forecolor_g = g
	font_forecolor_b = b
}

setBackgroundColor(ubyte r, ubyte g, ubyte b) {
	font_backcolor_r = r
	font_backcolor_g = g
	font_backcolor_b = b
}

getWidthOfText(txt text) double {
	maxWidth = 0
	width = 0
	i = 0
	for i < text.Length () {
		if text.CharAt (i) == (#"\n") {
			currentWidth = width * characterWidth * currentSize
			if currentWidth > maxWidth
				maxWidth = currentWidth
			width = 0
		}
		width = width + 1
		i = i + 1
	}

	currentWidth = width * characterWidth * currentSize
	if currentWidth > maxWidth
		maxWidth = currentWidth
	return maxWidth
}

getHeightOfText(txt text) double {
	height is double = 1
	i = 0
	for i < text.Length () {
		if text.CharAt (i) == (#"\n") height = height + 1
		i = i + 1
	}
	return height * characterHeight * currentSize
}

drawText(Ref renderer, txt text, double px, double py) {
	i = 0
	ox = 0
	oy = 0
	for i < text.Length () {
		current = text.CharAt (i)
		if current == (#"\n") {
			oy = oy + currentSize * characterHeight
			ox = 0
		} else if current == (#"\b") {
			ox = ox - currentSize * characterWidth
		} else if current == (#"\t") {
			ox = ox + (currentSize * characterWidth) * tabLength
		} else {
			renderer.drawCharacterAtXY((ox + px), (oy + py), current)
			ox = ox + currentSize * characterWidth
		}
		i = i + 1
	}
}

drawTextWithColor(Ref renderer, txt text, double px, double py) {
	i = 0
	ox = 0
	oy = 0
	for i < text.Length () {
		current = text.CharAt (i)
		if current == (#"\n") {
			oy = oy + currentSize * characterHeight
			ox = 0
		} else if current == (#"\b") {
			ox = ox - currentSize * characterWidth
		} else if current == (#"\t") {
			ox = ox + (currentSize * characterWidth) * tabLength
		} else {
			renderer.drawColor@sdl (font_backcolor_r, font_backcolor_g, font_backcolor_b, 255)
			renderer.fillRect@sdl ((ox + px), (oy + py), currentSize * characterWidth, currentSize * characterHeight)
			renderer.drawColor@sdl (font_forecolor_r, font_forecolor_g, font_forecolor_b, 255)
			renderer.drawCharacterAtXY((ox + px), (oy + py), current)
			ox = ox + currentSize * characterWidth
		}
		i = i + 1
	}
}

drawTextInRange(Ref renderer, txt text, double px, double py, ulong start, ulong end) {
	i = 0
	ox = 0
	oy = 0
	for i < text.Length () {
		current = text.CharAt (i)
		if current == (#"\n") {
			oy = oy + currentSize * characterHeight
			ox = 0
		} else if current == (#"\b") {
			ox = ox - currentSize * characterWidth
		} else if current == (#"\t") {
			ox = ox + (currentSize * characterWidth) * tabLength
		} else {
			if i >= start && i < end {
				renderer.drawColor@sdl (font_backcolor_r, font_backcolor_g, font_backcolor_b, 255)
				renderer.fillRect@sdl ((ox + px), (oy + py), currentSize * characterWidth, currentSize * characterHeight)
				renderer.drawColor@sdl (font_forecolor_r, font_forecolor_g, font_forecolor_b, 255)
				renderer.drawCharacterAtXY((ox + px), (oy + py), current)
			}
			ox = ox + currentSize * characterWidth
		}
		i = i + 1
	}
}

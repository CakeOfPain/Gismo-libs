include *@tracer

type_undefined  := 0
type_none       := 1
type_ubyte      := 2
type_byte       := 3
type_ushort     := 4
type_short      := 5
type_uint       := 6
type_int        := 7
type_float      := 8
type_ulong      := 9
type_long       := 10
type_double     := 11
type_text       := 12
type_function   := 13
type_Collection := 14
type_complex    := 15
type_any        := 16

types is txt[
	"undefined",
	"none",
	"ubyte",
	"byte",
	"ushort",
	"short",
	"uint",
	"int",
	"float",
	"ulong",
	"long",
	"double",
	"text",
	"function",
	"Collection",
	"complex",
	"any"
]

getFormatType(Ref t) Ref {
	if t == type_ubyte return type_ulong
	else if t == type_ushort return type_ulong
	else if t == type_uint return type_ulong
	else if t == type_byte return type_long
	else if t == type_short return type_long
	else if t == type_int return type_long
	else if t == type_float return type_double
	return t
}

endln = "\n"

cmp(txt a, txt b) ubyte {
	if a.Length() != b.Length()
		return false
	i is uint = 0
	for i < a.Length() {
		if a.CharAt(i) != b.CharAt(i)
			return false
		i = i + 1
	}
	return true
}

same(txt a, txt b) ubyte {
	a = upper(a)
	b = upper(b)
	if a.Length() != b.Length()
		return false
	i is uint = 0
	for i < a.Length() {
		if a.CharAt(i) != b.CharAt(i)
			return false
		i = i + 1
	}
	return true
}

upper(txt text) txt {
	new = ""
	for text.Length() {
		ascii = text.CharAt(0)
		if ascii > 96 && ascii < 123 {
			ascii = ascii - 32
		}
		new = new.InsertChar(ascii)
		text = text.Remove(0)
	}
	return new
}

reverse(txt text) txt {
	for i = 1; i < text.Length(); i+=1 {
		text = text.InsertChar(text.CharAt(text.Length() - 1 - i))
		text = text.Remove(text.Length() - 2 - i)
	}
	return text
}

// // Deprecated!
// ch(txt text) ubyte {
// 	if text.Length() == 0 return 0
// 	else return text.CharAt(0)
// }

pause(txt message) {
	message.Print()
	getch()
	endln.Print()
}

argsCheck(txt[] args, uint min, uint max) {
	size is uint = args.Size()
	if size < min {
		jErr("Too few arguments . . .")
	} else if size > max {
		jErr("Too many arguments . . .")
	}
	// Everything is ok . . .
}

colorCodeBlack    := 0u
colorCodeRed      := 1u
colorCodeGreen    := 2u
colorCodeYellow   := 3u
colorCodeBlue	  := 4u
colorCodeMagenta  := 5u
colorCodeCyan     := 6u
colorCodeWhite    := 8u

colorCodeReset    := 16u

outerr(txt message) {
	// fontColor@os(colorCodeRed)
	output(message)

	output("Full stack trace: ")
	printStackTrace()
	
	// fontColor@os(colorCodeReset)
}

jErr(txt message) {
	outerr(message)

	exit(1)
}

logWarning(txt warning) {
	// fontColor@os(colorCodeYellow)
	output(warning)
	
	// fontColor@os(colorCodeReset)
}

abort(txt message) {
	jErr(message)
}

assert(ubyte condition, txt message) {
	if condition abort(message)
}

progressbar(txt message, double progress, double finishline, long numberOfBlocks) {
	procent = progress / finishline
	blocks is long = procent * numberOfBlocks
	
	i = 0u
	for i < (numberOfBlocks + 2 + message.Length()) {
		"\r \r".Print()
		i = i + 1u
	}
	i = 0u
	message.Print()
	"[".Print()
	for i < blocks {
		"#".Print()
		i = i + 1u	
	}
	for i < numberOfBlocks {
		" ".Print()
		i = i + 1u	
	}
	"]".Print()
}

fill(txt value, long len) txt = fillWith(" ", value, len)

fillWith(txt fill_value, txt value, long len) txt {
	if len < 0 {
		len = len * (-1)
		if value.Length() < (len+1u) {
			i = value.Length()
			for i < (len+1u) {
				value = value + fill_value
				i = i + 1u
			}
		}
	} else {
		if value.Length() < (len+1u) {
			i = value.Length()
			for i < (len+1u) {
				value = fill_value + value
				i = i + 1u
			}
		}
	}
	return value
}

indexOfTxtInList(txt[] list, txt value) long {
	i = 0u
	for i < list.Size() {
		if cmp(list[i], value) return i
		i = i + 1
	}
	return -1
}

indexOfSameTxtInList(txt[] list, txt value) long {
	i = 0u
	for i < list.Size() {
		if same(list[i], value) return i
		i = i + 1
	}
	return -1
}

toBytes(txt string) ubyte[] {
	bytes is ubyte[]
	i = 0
	for i < string.Length()	{
		bytes.Add(string.CharAt(i))
		i = i + 1
	}
	return bytes
}

ccolor(short c) txt {
	// fontColor@os(c)
	return ""
}

// HINT: Prefer these function over using isInText with one of the sets
isUpper(ubyte ch) bool = ch >= 'A' && ch <= 'Z'
isLower(ubyte ch) bool = ch >= 'a' && ch <= 'z'
isNumeric(ubyte ch) bool = ch >= '0' && (ch < '9' || ch == '9')
isAlpha(ubyte ch) bool = isUpper(ch) || isLower(ch)
isAlphaNumeric(ubyte ch) bool = isAlpha(ch) || isNumeric(ch)
isWhitespace(ubyte ch) bool = ch.isInText(whitespace)

// HINT: Use these if one of the functions above is not containing one
// of these character sets, or composite ones
whitespace := " \n\t"
nummeric   := "1234567890"
alphaUpper := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
alphaLower := "abcdefghijklmnopqrstuvwxyz"
alpha      := alphaUpper + alphaLower

isInText(ubyte character, txt string) ubyte {
	i = 0
	for i < string.Length() {
		if character == string.CharAt(i)
			return true
		i = i + 1
	}
	return false
}

filter(txt string, txt characters) txt {
	newString = ""
	i = 0
	for i < string.Length() {
		c = string.CharAt(i)
		if !(c.isInText(characters)) {
			newString = newString.InsertChar(c)
		}
		i = i + 1
	}
	return newString
}

insertText(txt base, txt insertion, ulong pos) txt {
	product = ""
	i = 0u
	for i <= pos && i < base.Length() {
		product = product.InsertChar(base.CharAt(i))
		i = i + 1u
	}
	j = 0u
	for j < insertion.Length() {
		product = product.InsertChar(insertion.CharAt(j))
		j = j + 1u
	}

	for i < base.Length() {
		product = product.InsertChar(base.CharAt(i))
		i = i + 1u
	}
	return product
}

subText(txt text, ulong start, ulong end) txt {
	buffer = ""
	i = start
	for i < text.Length() && i < end {
		buffer = buffer.InsertChar(text.CharAt(i))
		i = i + 1u
	}
	return buffer
}

StringRepresentation(txt string) txt {
	format = "\""
	i = 0u
	for i < string.Length() {

		if string.CharAt(i) == (#"\"") format = format + ("\\\"")
		else if string.CharAt(i) == (#"\\") format = format + ("\\\\")
		else if string.CharAt(i) == (#"\n") format = format + ("\\n")
		else if string.CharAt(i) == (#"\t") format = format + ("\\t")
		else if string.CharAt(i) == (#"\a") format = format + ("\\a")
		else if string.CharAt(i) == (#"\r") format = format + ("\\r")
		else if string.CharAt(i) == (#"\b") format = format + ("\\b")
		else if string.CharAt(i) < 32 format = format + ("\\" + fillWith("0", (string.CharAt(i)) as txt, 2))
		else format = format.InsertChar(string.CharAt(i))

		i = i + 1u
	}
	return format + "\""
}

SQLStringRepresentation(txt string) txt {
	format = "\""
	i = 0u
	for i < string.Length() {

		if string.CharAt(i) == (#"\"") format = format + ("\"\"")
		else format = format.InsertChar(string.CharAt(i))

		i = i + 1u
	}
	return format + "\""
}

getChar(txt text, ulong index) ubyte {
	if index < text.Length() return text.CharAt(index)
	return (#"\0")
}

mulText(txt message, ulong times) txt {
	s := ""
	for i = 0; i < times; i += 1
		s += message
	return s
}

Str(*) txt {

	myString := ""

	args is $$args$$()
	argt is $$argt$$()

	for i = 0u; i < args.Size(); i += 1u {
		if argt[i] != type_ulong && argt[i] != type_long abort("Wrong Datatype")
		myString = myString.InsertChar(args[i] as ulong)
	}

	return myString
}

getIndexInText(txt text, ubyte character) long {
	for i=0; i < text.Length(); i+=1
		if text.CharAt(i) == character
			return i
	return -1
}

stripMargin(txt text) txt {
	nText := ""
	for i = 0u; i < text.Length(); i += 1u {
		c := text.CharAt(i)
		if c == '\n' {
			for i < text.Length() && c != '|'; i += 1u {
				c = text.CharAt(i)
			}
			i -= 1u
		} else {
			nText = nText.InsertChar(c)
		}
	}

	return nText
}

makeString(txt[] strings, txt seperator) txt {
	string := ""

	for i = 0u; i < strings.Size(); i += 1u {
		if (i+1) < strings.Size()
			string += strings[i] + seperator
		else
			string += strings[i]
	}

	return string
}

replace(txt text, txt subtext, txt replacement) txt {
	replacedText := ""

	advance = 1
	for i = 0; i < text.Length(); i+=advance {
		if subtext.cmp(text.subText(i, i+subtext.Length())) {
			replacedText += replacement
			advance = subtext.Length()
		} else {
			replacedText = replacedText.InsertChar(text.CharAt(i))
			advance = 1
		}
	}

	return replacedText
}

countChar(txt text, ubyte char) int {
	n = 0

	for i = 0; i < text.Length(); i+=1
		if text.CharAt(i) == char
			n += 1

	return n
}

startsWith(txt text, txt start) bool {
	return text.subText(0, start.Length()).cmp(start)
}

split(txt message, txt separator) txt[] {
	elements is txt[]
	element = ""
	for i=0; i < message.Length(); i+=1 {
		if message.subText(i, i+separator.Length()).cmp(separator) {
			elements.Add(element)
			element = ""
			i += separator.Length() - 1
		} else {
			element = element.InsertChar(message.CharAt(i))
		}
	}
	elements.Add(element)
	return elements
}

getArgument(txt[] args, txt name) txt {
	argument := ""
	for i = 0; i < args.Size(); i += 1 {
		x := args[i]
		if x.startsWith(name + "=") return x.subText(name.Length() + 1, x.Length())
	}
	return ""
}
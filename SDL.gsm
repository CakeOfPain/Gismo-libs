libHandle is ushort = GNL_LOAD("C:/Gismolang/GNL_files/sdlGismo.dll")


setupHandle is ushort = GNL_SYMBOL(libHandle, "setup")
quitHandle is ushort = GNL_SYMBOL(libHandle, "quit")
delayHandle is ushort = GNL_SYMBOL(libHandle, "delay")

createWindowHandle is ushort = GNL_SYMBOL(libHandle, "createWindow")
setTitleHandle is ushort = GNL_SYMBOL(libHandle, "setTitle")
setSizeHandle is ushort = GNL_SYMBOL(libHandle, "setSize")
getWidthHandle is ushort = GNL_SYMBOL(libHandle, "getWidth")
showHandle is ushort = GNL_SYMBOL(libHandle, "show")
hideHandle is ushort = GNL_SYMBOL(libHandle, "hide")
getHeightHandle is ushort = GNL_SYMBOL(libHandle, "getHeight")
getDrawableWidthHandle is ushort = GNL_SYMBOL(libHandle, "getDrawableWidth")
getDrawableHeightHandle is ushort = GNL_SYMBOL(libHandle, "getDrawableHeight")
destroyWindowHandle is ushort = GNL_SYMBOL(libHandle, "destroyWindow")
checkEventHandle is ushort = GNL_SYMBOL(libHandle, "checkEvent")
waitEventHandle is ushort = GNL_SYMBOL(libHandle, "waitEvent")
readKeyUpEventHandle is ushort = GNL_SYMBOL(libHandle, "readKeyUpEvent")
readKeyDownEventHandle is ushort = GNL_SYMBOL(libHandle, "readKeyDownEvent")
readMouseButtonDownEventHandle is ushort = GNL_SYMBOL (libHandle, "readMouseButtonDownEvent")
readMouseButtonUpEventHandle is ushort = GNL_SYMBOL (libHandle, "readMouseButtonUpEvent")
readMouseWheelXHandle is ushort = GNL_SYMBOL (libHandle, "readMouseWheelXEvent")
readMouseWheelYHandle is ushort = GNL_SYMBOL (libHandle, "readMouseWheelYEvent")
readTextInputEventHandle is ushort = GNL_SYMBOL (libHandle, "readTextInputEvent")
getMouseMotionHandle is ushort = GNL_SYMBOL(libHandle, "getMouseMotion")
getMouseXHandle is ushort = GNL_SYMBOL(libHandle, "getMouseX")
getMouseYHandle is ushort = GNL_SYMBOL(libHandle, "getMouseY")
centerHandle is ushort = GNL_SYMBOL(libHandle, "center")
resizableHandle is ushort = GNL_SYMBOL(libHandle, "resizable")
fullscreenHandle is ushort = GNL_SYMBOL(libHandle, "fullscreen")

createRendererHandle is ushort = GNL_SYMBOL(libHandle, "createRenderer")
clearRendererHandle is ushort = GNL_SYMBOL(libHandle, "clearRenderer")
drawPixelHandle is ushort = GNL_SYMBOL(libHandle, "drawPixel")
drawRectHandle is ushort = GNL_SYMBOL(libHandle, "drawRect")
fillRectHandle is ushort = GNL_SYMBOL(libHandle, "fillRect")
drawLineHandle is ushort = GNL_SYMBOL(libHandle, "drawLine")
drawColorHandle is ushort = GNL_SYMBOL(libHandle, "drawColor")
drawCircleHandle is ushort = GNL_SYMBOL(libHandle, "drawCircle")
fillCircleHandle is ushort = GNL_SYMBOL(libHandle, "fillCircle")

presentHandle is ushort = GNL_SYMBOL(libHandle, "present")
destroyRendererHandle is ushort = GNL_SYMBOL(libHandle, "destroyRenderer")

loadImageHandle      is ushort = GNL_SYMBOL (libHandle, "loadImage")
destroyImageHandle   is ushort = GNL_SYMBOL (libHandle, "destroyImage")
drawImageHandle      is ushort = GNL_SYMBOL (libHandle, "drawImage")
widthOfImageHandle   is ushort = GNL_SYMBOL (libHandle, "widthOfImage")
heightOfImageHandle  is ushort = GNL_SYMBOL (libHandle, "heightOfImage")
drawSpriteHandle     is ushort = GNL_SYMBOL (libHandle, "drawSprite")

getPerformanceCounterHandle is ushort = GNL_SYMBOL (libHandle, "getPerformanceCounter")
getPerformanceFrequencyHandle is ushort = GNL_SYMBOL (libHandle, "getPerformanceFrequency")

translateHandle is ushort = GNL_SYMBOL (libHandle, "translate")
translate_addHandle is ushort = GNL_SYMBOL (libHandle, "translate_add")
translate_xHandle is ushort = GNL_SYMBOL (libHandle, "translate_x")
translate_yHandle is ushort = GNL_SYMBOL (libHandle, "translate_y")
translation_xHandle is ushort = GNL_SYMBOL (libHandle, "translation_x")
translation_yHandle is ushort = GNL_SYMBOL (libHandle, "translation_y")

drawToHandle is ushort = GNL_SYMBOL (libHandle, "drawTo")
emptyImageHandle is ushort = GNL_SYMBOL (libHandle, "emptyImage")

loadFontHandle is ushort = GNL_SYMBOL (libHandle, "loadFont")
drawTextHandle is ushort = GNL_SYMBOL (libHandle, "drawText")
destroyFontHandle is ushort = GNL_SYMBOL (libHandle, "destroyFont")
widthOfTextHandle is ushort = GNL_SYMBOL (libHandle, "widthOfText")
heightOfTextHandle is ushort = GNL_SYMBOL (libHandle, "heightOfText")

setPositionOfWindowHandle is ushort = GNL_SYMBOL(libHandle, "setPositionOfWindow")
getPositionXOfWindowHandle is ushort = GNL_SYMBOL(libHandle, "getPositionXOfWindow")
getPositionYOfWindowHandle is ushort = GNL_SYMBOL(libHandle, "getPositionYOfWindow")

getGlobalMouseXHandle is ushort = GNL_SYMBOL(libHandle, "getGlobalMouseX")
getGlobalMouseYHanlde is ushort = GNL_SYMBOL(libHandle, "getGlobalMouseY")

setWindowOpacityHandle is ushort = GNL_SYMBOL(libHandle, "setWindowOpacity")
setWindowBorderedHandle is ushort = GNL_SYMBOL(libHandle, "setWindowBordered")

KEYUP := 769
MOUSEBUTTONUP := 1026
KEYDOWN := 768
MOUSEBUTTONDOWN := 1025
QUIT := 256
MOUSEMOTION := 1024
MOUSEWHEEL := 1027
TEXTINPUT := 771

RENDER_TARGETS_RESET := 8192

BUTTON_LEFT := 0
BUTTON_RIGHT := 1
BUTTON_MIDDLE := 2

setup()
    GNL_EXEC(libHandle, setupHandle, 0)

quit()
    GNL_EXEC(libHandle, quitHandle, 0)

delay(int time)
    GNL_EXEC(libHandle, delayHandle, 0, time)

createWindow() ulong
    return GNL_EXEC(libHandle, createWindowHandle, ulong)

setTitle(ulong window, txt title)
    GNL_EXEC(libHandle, setTitleHandle, 0, window, title)

setSize(ulong window, int width, int height)
    GNL_EXEC(libHandle, setSizeHandle, 0, window, width, height)

getWidth(ulong window) long
    return GNL_EXEC(libHandle, getWidthHandle, long, window)

getHeight(ulong window) long
    return GNL_EXEC(libHandle, getHeightHandle, long, window)

getDrawableWidth(ulong window) long
	return GNL_EXEC(libHandle, getDrawableWidthHandle, long, window)

getDrawableHeight(ulong window) long
	return GNL_EXEC(libHandle, getDrawableHeightHandle, long, window)

mapToDrawableX(ulong window, long x) long = x * (getDrawableWidth(window) / getWidth(window))
mapToDrawableY(ulong window, long y) long = y * (getDrawableHeight(window) / getHeight(window))

show(ulong window)
    GNL_EXEC(libHandle, showHandle, 0, window)

hide(ulong window)
    GNL_EXEC(libHandle, hideHandle, 0, window)

destroyWindow(ulong window)
    GNL_EXEC(libHandle, destroyWindowHandle, 0, window)

checkEvent(ulong window) ulong
    return GNL_EXEC(libHandle, checkEventHandle, ulong, window)

waitEvent(ulong window) ulong
	return GNL_EXEC(libHandle, waitEventHandle, ulong, window)

readTextInputEvent() txt
	return GNL_EXEC(libHandle, readTextInputEventHandle, txt)

readKeyUpEvent() long
    return GNL_EXEC(libHandle, readKeyUpEventHandle, long)

readKeyDownEvent() long
    return GNL_EXEC(libHandle, readKeyDownEventHandle, long)

readMouseButtonDownEvent () long
	return GNL_EXEC (libHandle, readMouseButtonDownEventHandle, long)

readMouseButtonUpEvent () long
	return GNL_EXEC (libHandle, readMouseButtonUpEventHandle, long)

readMouseWheelX () long
	return GNL_EXEC (libHandle, readMouseWheelXHandle, long)

readMouseWheelY () long
	return GNL_EXEC (libHandle, readMouseWheelYHandle, long)

getMouseX() long
    return GNL_EXEC(libHandle, getMouseXHandle, long)

getMouseY() long
    return GNL_EXEC(libHandle, getMouseYHandle, long)

getRealMouseX(Ref window) long
	return window.mapToDrawableY(GNL_EXEC(libHandle, getMouseXHandle, long))

getRealMouseY(Ref window) long
    return window.mapToDrawableY(GNL_EXEC(libHandle, getMouseYHandle, long))

center(Ref window)
	GNL_EXEC(libHandle, centerHandle, 0, window)

fullscreen(Ref window, ubyte state)
	GNL_EXEC(libHandle, fullscreenHandle, 0, window, state)

resizable(Ref window, ubyte state)
	GNL_EXEC(libHandle, resizableHandle, 0, window, state)

getMouseMotion() ubyte
    return GNL_EXEC(libHandle, getMouseMotionHandle, ubyte)

createRenderer(ulong window) ulong
    return GNL_EXEC(libHandle, createRendererHandle, ulong, window)

clearRenderer(ulong renderer)
    GNL_EXEC(libHandle, clearRendererHandle, 0, renderer)

drawPixel(ulong renderer, int x, int y)
    GNL_EXEC(libHandle, drawPixelHandle, 0, renderer, x, y)

drawRect(ulong renderer, int x, int y, int w, int h)
    GNL_EXEC(libHandle, drawRectHandle, 0, renderer, x, y, w, h)

fillRect(ulong renderer, int x, int y, int w, int h)
    GNL_EXEC(libHandle, fillRectHandle, 0, renderer, x, y, w, h)

drawLine(ulong renderer, int x1, int y1, int x2, int y2)
    GNL_EXEC(libHandle, drawLineHandle, 0, renderer, x1, y1, x2, y2)

drawColor(ulong renderer, long r, long g, long b, long a)
    GNL_EXEC(libHandle, drawColorHandle, 0, renderer, r, g, b, a)

present(ulong renderer)
    GNL_EXEC(libHandle, presentHandle, 0, renderer)

destroyRenderer(ulong renderer)
    GNL_EXEC(libHandle, destroyRendererHandle, 0, renderer)

loadImage (Ref renderer, txt path) Ref
	return GNL_EXEC (libHandle, loadImageHandle, Ref, renderer, path)

destroyImage (Ref texture)
	GNL_EXEC (libHandle, destroyImageHandle, 0, texture)

drawImage (Ref renderer, Ref texture, long x, long y, long width, long height)
	GNL_EXEC (libHandle, drawImageHandle, 0, renderer, texture, x, y, width, height)

widthOfImage (Ref texture) long
	return GNL_EXEC  (libHandle, widthOfImageHandle, long, texture)

heightOfImage (Ref texture) long
	return GNL_EXEC  (libHandle, heightOfImageHandle, long, texture)

drawSprite (Ref renderer, Ref texture, long x, long y, long width, long height, long sprite_x, long sprite_y, long sprite_width, long sprite_height)
	GNL_EXEC (libHandle, drawSpriteHandle, 0, renderer, texture, x, y, width, height, sprite_x, sprite_y, sprite_width, sprite_height)

getPerformanceCounter () ulong
	return GNL_EXEC (libHandle, getPerformanceCounterHandle, ulong)

getPerformanceFrequency () ulong
	return GNL_EXEC (libHandle, getPerformanceFrequencyHandle, ulong)

translate (double x, double y)
	GNL_EXEC (libHandle, translateHandle, 0, x, y)

translate_add (double x, double y)
	GNL_EXEC (libHandle, translate_addHandle, 0, x, y)

translate_x (double x)
	GNL_EXEC (libHandle, translate_xHandle, 0, x)

translate_y (double y)
	GNL_EXEC (libHandle, translate_yHandle, 0, y)

translation_x () double
	return GNL_EXEC (libHandle, translation_xHandle, double)

translation_y () double
	return GNL_EXEC (libHandle, translation_yHandle, double)

drawTo (Ref renderer, Ref image)
	GNL_EXEC (libHandle, drawToHandle, 0, renderer, image)

emptyImage (Ref renderer, ulong width, ulong height) Ref
	return GNL_EXEC (libHandle, emptyImageHandle, Ref, renderer, width, height)

isKeyDown (ulong event) ubyte {
	return event == KEYDOWN || event == MOUSEBUTTONDOWN
}

isKeyUp(ulong event) ubyte {
	return event == KEYUP || event == MOUSEBUTTONUP
}

drawCircle (Ref renderer, long centreX, long centreY, long radius)
	GNL_EXEC (libHandle, drawCircleHandle, 0, renderer, centreX, centreY, radius)

fillCircle (Ref renderer, long centreX, long centreY, long radius)
	GNL_EXEC (libHandle, fillCircleHandle, 0, renderer, centreX, centreY, radius)

loadFont (txt path, ulong size) Ref
	return GNL_EXEC (libHandle, loadFontHandle, Ref, path, size)

drawString (Ref renderer, Ref font, txt str, ulong x, ulong y) {
	if (#str) {
		lines is split@std(str, "\n")
		y_offset = 0
		for i = 0; i < lines.Size(); i += 1 {
			GNL_EXEC(libHandle, drawTextHandle, 0, renderer, font, lines[i], x, y+y_offset)
			y_offset += heightOfText(font, lines[i])
		}
	}
}

destroyFont (Ref font)
	GNL_EXEC(libHandle, destroyFontHandle, 0, font)

widthOfText (Ref font, txt textvalue) ulong {
	if !(#textvalue) return 0
	
	lines is split@std(textvalue, "\n")
	max_width = 0

	for i = 0; i < lines.Size(); i+=1
		line_width = GNL_EXEC(libHandle, widthOfTextHandle, ulong, font, lines[i])
		if line_width > max_width
			max_width = line_width

	return max_width
}

heightOfText (Ref font, txt textvalue) ulong {
	if !(#textvalue) return 0
	
	return GNL_EXEC(libHandle, heightOfTextHandle, ulong, font, textvalue) * (textvalue.countChar@std('\n')+1)
}

setPositionOfWindow (Ref window, long x, long y)
	GNL_EXEC(libHandle, setPositionOfWindowHandle, 0, window, x, y)
getPositionXOfWindow (Ref window) long
	return GNL_EXEC(libHandle, getPositionXOfWindowHandle, long, window)
getPositionYOfWindow (Ref window) long
	return GNL_EXEC(libHandle, getPositionYOfWindowHandle, long, window)
getGlobalMouseX () long
	return GNL_EXEC(libHandle, getGlobalMouseXHandle, long)
getGlobalMouseY () long
	return GNL_EXEC(libHandle, getGlobalMouseYHanlde, long)
setWindowOpacity (Ref window, double opa)
	GNL_EXEC(libHandle, setWindowOpacityHandle, 0, window, opa)
setWindowBordered (Ref window, ulong value)
	GNL_EXEC(libHandle, setWindowBorderedHandle, 0, window, value)